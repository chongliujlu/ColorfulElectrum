/* The following code was generated by JFlex 1.6.0 */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
// Electrum -- Copiright (c) 2015-present, Nuno Macedo
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package edu.mit.csail.sdg.alloy4compiler.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */

// @modified: Nuno Macedo // [HASLab] temporal solving


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Alloy.lex</tt>
 */
public final class CompLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\100\1\66\1\71\1\72\1\73\1\71\16\100\4\0\1\66\1\2"+
    "\1\67\1\3\1\75\1\0\1\4\1\1\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\14\1\15\12\76\1\16\1\54\1\17\1\20\1\13"+
    "\1\0\1\21\10\75\1\62\11\75\1\64\1\65\6\75\1\22\1\70"+
    "\1\23\1\24\1\75\1\0\1\31\1\32\1\36\1\55\1\43\1\42"+
    "\1\53\1\47\1\50\1\57\1\56\1\37\1\60\1\45\1\51\1\52"+
    "\1\63\1\35\1\33\1\34\1\46\1\44\1\40\1\61\1\41\1\75"+
    "\1\25\1\26\1\27\1\30\6\100\1\74\32\100\2\0\4\77\4\0"+
    "\1\77\2\0\1\100\7\0\1\77\4\0\1\77\5\0\27\77\1\0"+
    "\37\77\1\0\u01ca\77\4\0\14\77\16\0\5\77\7\0\1\77\1\0"+
    "\1\77\21\0\160\100\5\77\1\0\2\77\2\0\4\77\10\0\1\77"+
    "\1\0\3\77\1\0\1\77\1\0\24\77\1\0\123\77\1\0\213\77"+
    "\1\0\5\100\2\0\236\77\11\0\46\77\2\0\1\77\7\0\47\77"+
    "\7\0\1\77\1\0\55\100\1\0\1\100\1\0\2\100\1\0\2\100"+
    "\1\0\1\100\10\0\33\77\5\0\3\77\15\0\5\100\6\0\1\77"+
    "\4\0\13\100\5\0\53\77\37\100\4\0\2\77\1\100\143\77\1\0"+
    "\1\77\10\100\1\0\6\100\2\77\2\100\1\0\4\100\2\77\12\100"+
    "\3\77\2\0\1\77\17\0\1\100\1\77\1\100\36\77\33\100\2\0"+
    "\131\77\13\100\1\77\16\0\12\100\41\77\11\100\2\77\4\0\1\77"+
    "\5\0\26\77\4\100\1\77\11\100\1\77\3\100\1\77\5\100\22\0"+
    "\31\77\3\100\104\0\1\77\1\0\13\77\67\0\33\100\1\0\4\100"+
    "\66\77\3\100\1\77\22\100\1\77\7\100\12\77\2\100\2\0\12\100"+
    "\1\0\7\77\1\0\7\77\1\0\3\100\1\0\10\77\2\0\2\77"+
    "\2\0\26\77\1\0\7\77\1\0\1\77\3\0\4\77\2\0\1\100"+
    "\1\77\7\100\2\0\2\100\2\0\3\100\1\77\10\0\1\100\4\0"+
    "\2\77\1\0\3\77\2\100\2\0\12\100\4\77\7\0\1\77\5\0"+
    "\3\100\1\0\6\77\4\0\2\77\2\0\26\77\1\0\7\77\1\0"+
    "\2\77\1\0\2\77\1\0\2\77\2\0\1\100\1\0\5\100\4\0"+
    "\2\100\2\0\3\100\3\0\1\100\7\0\4\77\1\0\1\77\7\0"+
    "\14\100\3\77\1\100\13\0\3\100\1\0\11\77\1\0\3\77\1\0"+
    "\26\77\1\0\7\77\1\0\2\77\1\0\5\77\2\0\1\100\1\77"+
    "\10\100\1\0\3\100\1\0\3\100\2\0\1\77\17\0\2\77\2\100"+
    "\2\0\12\100\1\0\1\77\17\0\3\100\1\0\10\77\2\0\2\77"+
    "\2\0\26\77\1\0\7\77\1\0\2\77\1\0\5\77\2\0\1\100"+
    "\1\77\7\100\2\0\2\100\2\0\3\100\10\0\2\100\4\0\2\77"+
    "\1\0\3\77\2\100\2\0\12\100\1\0\1\77\20\0\1\100\1\77"+
    "\1\0\6\77\3\0\3\77\1\0\4\77\3\0\2\77\1\0\1\77"+
    "\1\0\2\77\3\0\2\77\3\0\3\77\3\0\14\77\4\0\5\100"+
    "\3\0\3\100\1\0\4\100\2\0\1\77\6\0\1\100\16\0\12\100"+
    "\11\0\1\77\7\0\3\100\1\0\10\77\1\0\3\77\1\0\27\77"+
    "\1\0\12\77\1\0\5\77\3\0\1\77\7\100\1\0\3\100\1\0"+
    "\4\100\7\0\2\100\1\0\2\77\6\0\2\77\2\100\2\0\12\100"+
    "\22\0\2\100\1\0\10\77\1\0\3\77\1\0\27\77\1\0\12\77"+
    "\1\0\5\77\2\0\1\100\1\77\7\100\1\0\3\100\1\0\4\100"+
    "\7\0\2\100\7\0\1\77\1\0\2\77\2\100\2\0\12\100\1\0"+
    "\2\77\17\0\2\100\1\0\10\77\1\0\3\77\1\0\51\77\2\0"+
    "\1\77\7\100\1\0\3\100\1\0\4\100\1\77\10\0\1\100\10\0"+
    "\2\77\2\100\2\0\12\100\12\0\6\77\2\0\2\100\1\0\22\77"+
    "\3\0\30\77\1\0\11\77\1\0\1\77\2\0\7\77\3\0\1\100"+
    "\4\0\6\100\1\0\1\100\1\0\10\100\22\0\2\100\15\0\60\77"+
    "\1\100\2\77\7\100\4\0\10\77\10\100\1\0\12\100\47\0\2\77"+
    "\1\0\1\77\2\0\2\77\1\0\1\77\2\0\1\77\6\0\4\77"+
    "\1\0\7\77\1\0\3\77\1\0\1\77\1\0\1\77\2\0\2\77"+
    "\1\0\4\77\1\100\2\77\6\100\1\0\2\100\1\77\2\0\5\77"+
    "\1\0\1\77\1\0\6\100\2\0\12\100\2\0\4\77\40\0\1\77"+
    "\27\0\2\100\6\0\12\100\13\0\1\100\1\0\1\100\1\0\1\100"+
    "\4\0\2\100\10\77\1\0\44\77\4\0\24\100\1\0\2\100\5\77"+
    "\13\100\1\0\44\100\11\0\1\100\71\0\53\77\24\100\1\77\12\100"+
    "\6\0\6\77\4\100\4\77\3\100\1\77\3\100\2\77\7\100\3\77"+
    "\4\100\15\77\14\100\1\77\17\100\2\0\46\77\1\0\1\77\5\0"+
    "\1\77\2\0\53\77\1\0\u014d\77\1\0\4\77\2\0\7\77\1\0"+
    "\1\77\1\0\4\77\2\0\51\77\1\0\4\77\2\0\41\77\1\0"+
    "\4\77\2\0\7\77\1\0\1\77\1\0\4\77\2\0\17\77\1\0"+
    "\71\77\1\0\4\77\2\0\103\77\2\0\3\100\40\0\20\77\20\0"+
    "\125\77\14\0\u026c\77\2\0\21\77\1\0\32\77\5\0\113\77\3\0"+
    "\3\77\17\0\15\77\1\0\4\77\3\100\13\0\22\77\3\100\13\0"+
    "\22\77\2\100\14\0\15\77\1\0\3\77\1\0\2\100\14\0\64\77"+
    "\40\100\3\0\1\77\3\0\2\77\1\100\2\0\12\100\41\0\3\100"+
    "\2\0\12\100\6\0\130\77\10\0\51\77\1\100\1\77\5\0\106\77"+
    "\12\0\35\77\3\0\14\100\4\0\14\100\12\0\12\100\36\77\2\0"+
    "\5\77\13\0\54\77\4\0\21\100\7\77\2\100\6\0\12\100\46\0"+
    "\27\77\5\100\4\0\65\77\12\100\1\0\35\100\2\0\13\100\6\0"+
    "\12\100\15\0\1\77\130\0\5\100\57\77\21\100\7\77\4\0\12\100"+
    "\21\0\11\100\14\0\3\100\36\77\15\100\2\77\12\100\54\77\16\100"+
    "\14\0\44\77\24\100\10\0\12\100\3\0\3\77\12\100\44\77\122\0"+
    "\3\100\1\0\25\100\4\77\1\100\4\77\3\100\2\77\11\0\300\77"+
    "\47\100\25\0\4\100\u0116\77\2\0\6\77\2\0\46\77\2\0\6\77"+
    "\2\0\10\77\1\0\1\77\1\0\1\77\1\0\1\77\1\0\37\77"+
    "\2\0\65\77\1\0\7\77\1\0\1\77\3\0\3\77\1\0\7\77"+
    "\3\0\4\77\2\0\6\77\4\0\15\77\5\0\3\77\1\0\7\77"+
    "\16\0\5\100\30\0\1\72\1\72\5\100\20\0\2\77\23\0\1\77"+
    "\13\0\5\100\5\0\6\100\1\0\1\77\15\0\1\77\20\0\15\77"+
    "\3\0\33\77\25\0\15\100\4\0\1\100\3\0\14\100\21\0\1\77"+
    "\4\0\1\77\2\0\12\77\1\0\1\77\3\0\5\77\6\0\1\77"+
    "\1\0\1\77\1\0\1\77\1\0\4\77\1\0\13\77\2\0\4\77"+
    "\5\0\5\77\4\0\1\77\21\0\51\77\u02d7\0\1\66\1\66\1\66"+
    "\1\66\221\0\1\66\1\66\1\66\1\66\u0707\0\57\77\1\0\57\77"+
    "\1\0\205\77\6\0\4\77\3\100\2\77\14\0\46\77\1\0\1\77"+
    "\5\0\1\77\2\0\70\77\7\0\1\77\17\0\1\100\27\77\11\0"+
    "\7\77\1\0\7\77\1\0\7\77\1\0\7\77\1\0\7\77\1\0"+
    "\7\77\1\0\7\77\1\0\7\77\1\0\40\100\57\0\1\77\u01d5\0"+
    "\3\77\31\0\11\77\6\100\1\0\5\77\2\0\5\77\4\0\126\77"+
    "\2\0\2\100\2\0\3\77\1\0\132\77\1\0\4\77\5\0\51\77"+
    "\3\0\136\77\21\0\33\77\65\0\20\77\u0200\0\u19b6\77\112\0\u51cd\77"+
    "\63\0\u048d\77\103\0\56\77\2\0\u010d\77\3\0\20\77\12\100\2\77"+
    "\24\0\57\77\1\100\4\0\12\100\1\0\31\77\7\0\1\100\120\77"+
    "\2\100\45\0\11\77\2\0\147\77\2\0\4\77\1\0\4\77\14\0"+
    "\13\77\115\0\12\77\1\100\3\77\1\100\4\77\1\100\27\77\5\100"+
    "\20\0\1\77\7\0\64\77\14\0\2\100\62\77\21\100\13\0\12\100"+
    "\6\0\22\100\6\77\3\0\1\77\4\0\12\100\34\77\10\100\2\0"+
    "\27\77\15\100\14\0\35\77\3\0\4\100\57\77\16\100\16\0\1\77"+
    "\12\100\46\0\51\77\16\100\11\0\3\77\1\100\10\77\2\100\2\0"+
    "\12\100\6\0\27\77\3\0\1\77\1\100\4\0\60\77\1\100\1\77"+
    "\3\100\2\77\2\100\5\77\2\100\1\77\1\100\1\77\30\0\3\77"+
    "\2\0\13\77\5\100\2\0\3\77\2\100\12\0\6\77\2\0\6\77"+
    "\2\0\6\77\11\0\7\77\1\0\7\77\221\0\43\77\10\100\1\0"+
    "\2\100\2\0\12\100\6\0\u2ba4\77\14\0\27\77\4\0\61\77\u2104\0"+
    "\u016e\77\2\0\152\77\46\0\7\77\14\0\5\77\5\0\1\77\1\100"+
    "\12\77\1\0\15\77\1\0\5\77\1\0\1\77\1\0\2\77\1\0"+
    "\2\77\1\0\154\77\41\0\u016b\77\22\0\100\77\2\0\66\77\50\0"+
    "\15\77\3\0\20\100\20\0\7\100\14\0\2\77\30\0\3\77\31\0"+
    "\1\77\6\0\5\77\1\0\207\77\2\0\1\100\4\0\1\77\13\0"+
    "\12\100\7\0\32\77\4\0\1\77\1\0\32\77\13\0\131\77\3\0"+
    "\6\77\2\0\6\77\2\0\6\77\2\0\3\77\3\0\2\77\3\0"+
    "\2\77\22\0\3\100\4\0\14\77\1\0\32\77\1\0\23\77\1\0"+
    "\2\77\1\0\17\77\2\0\16\77\42\0\173\77\105\0\65\77\210\0"+
    "\1\100\202\0\35\77\3\0\61\77\57\0\37\77\21\0\33\77\65\0"+
    "\36\77\2\0\44\77\4\0\10\77\1\0\5\77\52\0\236\77\2\0"+
    "\12\100\u0356\0\6\77\2\0\1\77\1\0\54\77\1\0\2\77\3\0"+
    "\1\77\2\0\27\77\252\0\26\77\12\0\32\77\106\0\70\77\6\0"+
    "\2\77\100\0\1\77\3\100\1\0\2\100\5\0\4\100\4\77\1\0"+
    "\3\77\1\0\33\77\4\0\3\100\4\0\1\100\40\0\35\77\203\0"+
    "\66\77\12\0\26\77\12\0\23\77\215\0\111\77\u03b7\0\3\100\65\77"+
    "\17\100\37\0\12\100\20\0\3\100\55\77\13\100\2\0\1\100\22\0"+
    "\31\77\7\0\12\100\6\0\3\100\44\77\16\100\1\0\12\100\100\0"+
    "\3\100\60\77\16\100\4\77\13\0\12\100\u04a6\0\53\77\15\100\10\0"+
    "\12\100\u0936\0\u036f\77\221\0\143\77\u0b9d\0\u042f\77\u33d1\0\u0239\77\u04c7\0"+
    "\105\77\13\0\1\77\56\100\20\0\4\100\15\77\u4060\0\2\77\u2163\0"+
    "\5\100\3\0\26\100\2\0\7\100\36\0\4\100\224\0\3\100\u01bb\0"+
    "\125\77\1\0\107\77\1\0\2\77\2\0\1\77\2\0\2\77\2\0"+
    "\4\77\1\0\14\77\1\0\1\77\1\0\7\77\1\0\101\77\1\0"+
    "\4\77\2\0\10\77\1\0\7\77\1\0\34\77\1\0\4\77\1\0"+
    "\5\77\1\0\1\77\3\0\7\77\1\0\u0154\77\2\0\31\77\1\0"+
    "\31\77\1\0\37\77\1\0\31\77\1\0\37\77\1\0\31\77\1\0"+
    "\37\77\1\0\31\77\1\0\37\77\1\0\31\77\1\0\10\77\2\0"+
    "\62\100\u1600\0\4\77\1\0\33\77\1\0\2\77\1\0\1\77\2\0"+
    "\1\77\1\0\12\77\1\0\4\77\1\0\1\77\1\0\1\77\6\0"+
    "\1\77\4\0\1\77\1\0\1\77\1\0\1\77\1\0\3\77\1\0"+
    "\2\77\1\0\1\77\2\0\1\77\1\0\1\77\1\0\1\77\1\0"+
    "\1\77\1\0\1\77\1\0\2\77\1\0\1\77\2\0\4\77\1\0"+
    "\7\77\1\0\4\77\1\0\4\77\1\0\1\77\1\0\12\77\1\0"+
    "\21\77\5\0\3\77\1\0\5\77\1\0\21\77\u1144\0\ua6d7\77\51\0"+
    "\u1035\77\13\0\336\77\u3fe2\0\u021e\77\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\100\36\0\140\100\200\0\360\100\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\21\32\1\33\5\32\1\34\1\35\1\36"+
    "\1\37\1\40\1\34\1\41\1\42\1\43\1\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\47\1\51\1\32\1\52"+
    "\27\32\1\53\3\32\1\54\2\32\1\51\11\32\1\55"+
    "\1\0\1\56\1\57\2\0\1\60\2\32\1\61\2\32"+
    "\1\37\1\62\1\63\1\64\1\65\1\32\1\66\4\32"+
    "\1\67\1\32\1\70\2\32\1\71\1\72\5\32\1\73"+
    "\1\32\1\74\1\3\4\32\1\60\1\75\3\32\1\76"+
    "\6\32\1\77\2\32\1\100\1\0\1\34\5\32\1\101"+
    "\1\32\1\102\2\32\1\103\1\104\1\105\1\32\1\106"+
    "\4\32\1\107\1\32\1\110\1\32\1\111\1\32\1\112"+
    "\1\113\1\114\1\32\1\115\1\32\1\116\2\32\1\117"+
    "\3\32\1\120\1\121\2\32\1\122\5\32\1\123\11\32"+
    "\1\124\1\125\6\32\1\126\6\32\1\127\1\130\1\32"+
    "\1\131\1\132\1\32\1\133\1\134\2\32\1\50\2\32"+
    "\1\135\1\32\1\136\4\32\1\137\1\116\3\32\1\114"+
    "\1\140\1\73\2\32\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\101\0\101\0\202\0\101\0\101"+
    "\0\101\0\303\0\101\0\u0104\0\u0145\0\101\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\101\0\101\0\101\0\101\0\101\0\u028a"+
    "\0\101\0\101\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410"+
    "\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618"+
    "\0\u0659\0\u069a\0\u06db\0\101\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\101\0\u0861\0\u08a2\0\101\0\101\0\u08e3\0\101"+
    "\0\u0924\0\101\0\u0965\0\101\0\101\0\101\0\u09a6\0\101"+
    "\0\101\0\101\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34"+
    "\0\u0d75\0\u0db6\0\u0df7\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144"+
    "\0\u1185\0\u11c6\0\u0492\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2\0\101"+
    "\0\u1513\0\u1554\0\101\0\u1595\0\u15d6\0\u0492\0\u1617\0\u1658"+
    "\0\u0492\0\u0492\0\u0492\0\u0492\0\u0492\0\u1699\0\u0492\0\u16da"+
    "\0\u171b\0\u175c\0\u179d\0\u0492\0\u17de\0\u0492\0\u181f\0\u1860"+
    "\0\u0492\0\u0492\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u0492\0\u0492\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u0492"+
    "\0\u0492\0\u1b6c\0\u1bad\0\u1bee\0\u0492\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u0492\0\u1db5\0\u1df6\0\u1450\0\u1e37"+
    "\0\u1513\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u0492\0\u1fbd"+
    "\0\u0492\0\u1ffe\0\u203f\0\u0492\0\u0492\0\u0492\0\u2080\0\u0492"+
    "\0\u20c1\0\u2102\0\u2143\0\u2184\0\u0492\0\u21c5\0\u0492\0\u2206"+
    "\0\u0492\0\u2247\0\u0492\0\u0492\0\u2288\0\u22c9\0\u0492\0\u230a"+
    "\0\u234b\0\u238c\0\u23cd\0\u0492\0\u240e\0\u244f\0\u2490\0\u0492"+
    "\0\u0492\0\u24d1\0\u2512\0\u0492\0\u2553\0\u2594\0\u25d5\0\u2616"+
    "\0\u2657\0\u0492\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u28a0\0\u0492\0\u0492\0\u28e1\0\u2922\0\u2963"+
    "\0\u29a4\0\u29e5\0\u2a26\0\u0492\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a"+
    "\0\u2b6b\0\u2bac\0\u0492\0\u0492\0\u2bed\0\u0492\0\u0492\0\u2c2e"+
    "\0\u0492\0\u0492\0\u2c6f\0\u2cb0\0\u0492\0\u2cf1\0\u2d32\0\u0492"+
    "\0\u2d73\0\u0492\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\u0492\0\u0492"+
    "\0\u2eb8\0\u2ef9\0\u2f3a\0\u0492\0\u0492\0\u0492\0\u2f7b\0\u2fbc"+
    "\0\u0492";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\2\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\42\1\54\1\55\2\42\1\56\1\42"+
    "\1\57\1\42\1\60\1\61\1\62\1\63\1\2\1\62"+
    "\1\0\1\62\1\0\1\42\1\64\1\42\1\2\105\0"+
    "\1\65\104\0\1\66\102\0\1\67\1\70\100\0\1\71"+
    "\4\0\1\72\67\0\1\73\5\0\1\67\76\0\1\74"+
    "\2\0\1\16\100\0\1\75\1\76\1\77\73\0\1\100"+
    "\3\0\1\101\107\0\1\102\103\0\1\42\1\103\1\104"+
    "\3\42\1\105\2\42\1\106\2\42\1\107\6\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\15\42\1\110"+
    "\5\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\12\42\1\111\2\42\1\112\1\42\1\113\1\114\2\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\4\42"+
    "\1\115\11\42\1\116\4\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\12\42\1\117\2\42\1\120\5\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\16\42"+
    "\1\121\4\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\12\42\1\122\5\42\1\123\2\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\23\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\1\124\14\42\1\125"+
    "\2\42\1\126\2\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\6\42\1\127\4\42\1\130\1\131\6\42"+
    "\1\0\4\42\1\132\4\42\1\0\1\42\4\0\5\42"+
    "\31\0\1\133\22\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\20\42\1\134\2\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\14\42\1\135\6\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\17\42\1\136"+
    "\3\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\11\42\1\137\2\42\1\140\6\42\1\0\1\141\2\42"+
    "\1\142\5\42\1\0\1\42\4\0\5\42\31\0\4\42"+
    "\1\143\7\42\1\144\4\42\1\145\1\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\1\146\3\42\1\147"+
    "\16\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\17\42\1\150\3\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\20\42\1\151\2\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\14\42\1\152\6\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\3\42\1\153"+
    "\17\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\17\42\1\154\3\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\67\63\1\155\1\156\10\63\31\0\23\157\1\0"+
    "\11\157\1\0\1\157\5\0\1\157\1\64\2\0\71\67"+
    "\1\62\7\67\13\0\1\160\65\0\7\161\1\162\71\161"+
    "\13\0\1\163\116\0\2\42\1\164\20\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\2\42\1\165\20\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\6\42"+
    "\1\166\1\167\13\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\3\42\1\170\17\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\23\42\1\0\1\171\10\42"+
    "\1\0\1\42\4\0\5\42\31\0\3\42\1\172\17\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\3\42"+
    "\1\173\17\42\1\0\6\42\1\174\2\42\1\0\1\42"+
    "\4\0\5\42\31\0\23\42\1\0\3\42\1\175\5\42"+
    "\1\0\1\42\4\0\5\42\31\0\14\42\1\176\5\42"+
    "\1\177\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\23\42\1\0\3\42\1\200\5\42\1\0\1\42\4\0"+
    "\5\42\31\0\17\42\1\201\3\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\17\42\1\202\3\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\6\42\1\203"+
    "\14\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\14\42\1\204\6\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\12\42\1\205\10\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\3\42\1\206\17\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\14\42\1\207"+
    "\6\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\5\42\1\210\15\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\14\42\1\211\6\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\4\42\1\212\16\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\2\42\1\213"+
    "\20\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\12\42\1\214\10\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\15\42\1\215\5\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\1\216\2\42\1\217\12\42"+
    "\1\220\2\42\1\221\1\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\4\42\1\222\16\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\3\42\1\223\10\42"+
    "\1\224\6\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\3\42\1\225\13\42\1\226\3\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\2\42\1\227\20\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\11\42"+
    "\1\230\11\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\3\42\1\231\17\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\12\42\1\232\10\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\21\42\1\233\1\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\5\42"+
    "\1\234\4\42\1\235\10\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\12\42\1\236\10\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\4\42\1\237\16\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\12\42"+
    "\1\240\4\42\1\241\3\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\2\42\1\242\20\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\23\42\1\0\1\243"+
    "\10\42\1\0\1\42\4\0\5\42\31\0\3\42\1\244"+
    "\17\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\4\42\1\245\16\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\23\42\1\0\3\42\1\246\5\42\1\0"+
    "\1\42\4\0\5\42\31\0\23\247\1\0\11\247\1\0"+
    "\1\247\5\0\2\247\2\0\71\63\4\0\4\63\31\0"+
    "\23\157\1\0\11\157\1\0\1\157\5\0\2\157\2\0"+
    "\7\161\1\250\100\161\1\250\5\161\1\251\63\161\31\0"+
    "\3\42\1\252\17\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\12\42\1\253\10\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\1\254\22\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\12\42\1\255\10\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\5\42"+
    "\1\256\15\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\12\42\1\257\10\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\22\42\1\260\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\2\42\1\261\20\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\12\42\1\262"+
    "\10\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\5\42\1\263\15\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\12\42\1\264\10\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\3\42\1\265\17\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\12\42\1\266"+
    "\10\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\14\42\1\267\6\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\23\42\1\0\3\42\1\270\5\42\1\0"+
    "\1\42\4\0\5\42\31\0\5\42\1\271\15\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\12\42\1\272"+
    "\10\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\1\273\22\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\12\42\1\274\10\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\12\42\1\275\10\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\17\42\1\276\3\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\13\42"+
    "\1\277\7\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\3\42\1\300\17\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\14\42\1\301\6\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\6\42\1\302\14\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\12\42"+
    "\1\303\10\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\14\42\1\304\6\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\3\42\1\305\17\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\13\42\1\306\7\42"+
    "\1\0\1\307\10\42\1\0\1\42\4\0\5\42\31\0"+
    "\13\42\1\310\7\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\23\42\1\0\2\42\1\311\6\42\1\0"+
    "\1\42\4\0\5\42\31\0\15\42\1\312\5\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\17\42\1\313"+
    "\3\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\12\42\1\314\10\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\7\161\1\250\5\161\1\62\63\161\31\0\4\42"+
    "\1\315\16\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\4\42\1\316\16\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\10\42\1\317\12\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\4\42\1\320\16\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\12\42"+
    "\1\321\10\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\22\42\1\322\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\1\323\22\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\23\42\1\0\1\42\1\324\7\42"+
    "\1\0\1\42\4\0\5\42\31\0\3\42\1\325\17\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\3\42"+
    "\1\326\17\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\14\42\1\327\6\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\15\42\1\330\5\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\5\42\1\331\15\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\6\42"+
    "\1\332\14\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\20\42\1\333\2\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\17\42\1\334\3\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\17\42\1\335\3\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\17\42"+
    "\1\336\3\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\1\337\22\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\20\42\1\340\2\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\6\42\1\341\14\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\14\42\1\342"+
    "\6\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\1\343\22\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\3\42\1\344\17\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\2\42\1\345\20\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\12\42\1\346\10\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\2\42"+
    "\1\347\20\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\15\42\1\350\5\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\6\42\1\351\14\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\23\42\1\0\1\352"+
    "\10\42\1\0\1\42\4\0\5\42\31\0\2\42\1\353"+
    "\20\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\3\42\1\354\17\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\4\42\1\355\16\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\12\42\1\356\10\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\3\42\1\357"+
    "\17\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\20\42\1\360\2\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\3\42\1\361\17\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\17\42\1\362\3\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\12\42\1\363"+
    "\10\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\22\42\1\364\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\5\42\1\365\15\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\4\42\1\366\16\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\12\42\1\367\10\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\1\370"+
    "\22\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\10\42\1\371\12\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\2\42\1\372\20\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\3\42\1\373\17\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\17\42\1\374"+
    "\3\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\2\42\1\375\20\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\17\42\1\376\3\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\15\42\1\377\5\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\12\42\1\u0100"+
    "\10\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\14\42\1\u0101\6\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\3\42\1\u0102\17\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\6\42\1\u0103\14\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\17\42\1\u0104"+
    "\3\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\5\42\1\u0105\15\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\20\42\1\u0106\2\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\2\42\1\u0107\20\42\1\0"+
    "\11\42\1\0\1\42\4\0\5\42\31\0\3\42\1\u0108"+
    "\17\42\1\0\11\42\1\0\1\42\4\0\5\42\31\0"+
    "\6\42\1\u0109\14\42\1\0\11\42\1\0\1\42\4\0"+
    "\5\42\31\0\13\42\1\u010a\7\42\1\0\11\42\1\0"+
    "\1\42\4\0\5\42\31\0\1\u010b\22\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\14\42\1\u010c\6\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\10\42"+
    "\1\u010d\12\42\1\0\11\42\1\0\1\42\4\0\5\42"+
    "\31\0\12\42\1\u010e\10\42\1\0\11\42\1\0\1\42"+
    "\4\0\5\42\31\0\6\42\1\u010f\14\42\1\0\11\42"+
    "\1\0\1\42\4\0\5\42\31\0\6\42\1\u0110\14\42"+
    "\1\0\11\42\1\0\1\42\4\0\5\42\31\0\10\42"+
    "\1\u0111\12\42\1\0\11\42\1\0\1\42\4\0\5\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12285];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\21\1\1\11\5\1\1\11"+
    "\2\1\2\11\1\1\1\11\1\1\1\11\1\0\3\11"+
    "\1\1\3\11\53\1\1\0\1\1\1\11\2\0\1\11"+
    "\64\1\1\0\151\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[273];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public CompModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currenty only supports\nthree escape sequences: \\\\, \\n, and \\\""); // [HASLab]
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(CompSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(CompSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
       n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" is too large to be stored in a Java integer");
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2890) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   * @throws Err 
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException, Err {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character.");
          }
        case 98: break;
        case 2: 
          { return alloy_sym(yytext(), CompSym.PRIME       );
          }
        case 99: break;
        case 3: 
          { return alloy_sym(yytext(), CompSym.NOT         );
          }
        case 100: break;
        case 4: 
          { return alloy_sym(yytext(), CompSym.HASH        );
          }
        case 101: break;
        case 5: 
          { return alloy_sym(yytext(), CompSym.AMPERSAND   );
          }
        case 102: break;
        case 6: 
          { return alloy_sym(yytext(), CompSym.LPAREN      );
          }
        case 103: break;
        case 7: 
          { return alloy_sym(yytext(), CompSym.RPAREN      );
          }
        case 104: break;
        case 8: 
          { return alloy_sym(yytext(), CompSym.STAR        );
          }
        case 105: break;
        case 9: 
          { return alloy_sym(yytext(), CompSym.PLUS        );
          }
        case 106: break;
        case 10: 
          { return alloy_sym(yytext(), CompSym.COMMA       );
          }
        case 107: break;
        case 11: 
          { return alloy_sym(yytext(), CompSym.MINUS       );
          }
        case 108: break;
        case 12: 
          { return alloy_sym(yytext(), CompSym.GT          );
          }
        case 109: break;
        case 13: 
          { return alloy_sym(yytext(), CompSym.DOT         );
          }
        case 110: break;
        case 14: 
          { return alloy_sym(yytext(), CompSym.SLASH       );
          }
        case 111: break;
        case 15: 
          { return alloy_sym(yytext(), CompSym.COLON       );
          }
        case 112: break;
        case 16: 
          { return alloy_sym(yytext(), CompSym.LT          );
          }
        case 113: break;
        case 17: 
          { return alloy_sym(yytext(), CompSym.EQUALS      );
          }
        case 114: break;
        case 18: 
          { return alloy_sym(yytext(), CompSym.AT          );
          }
        case 115: break;
        case 19: 
          { return alloy_sym(yytext(), CompSym.LBRACKET    );
          }
        case 116: break;
        case 20: 
          { return alloy_sym(yytext(), CompSym.RBRACKET    );
          }
        case 117: break;
        case 21: 
          { return alloy_sym(yytext(), CompSym.CARET       );
          }
        case 118: break;
        case 22: 
          { return alloy_sym(yytext(), CompSym.LBRACE      );
          }
        case 119: break;
        case 23: 
          { return alloy_sym(yytext(), CompSym.BAR         );
          }
        case 120: break;
        case 24: 
          { return alloy_sym(yytext(), CompSym.RBRACE      );
          }
        case 121: break;
        case 25: 
          { return alloy_sym(yytext(), CompSym.TILDE       );
          }
        case 122: break;
        case 26: 
          { return alloy_id  (yytext());
          }
        case 123: break;
        case 27: 
          { return alloy_sym(yytext(), CompSym.TRCSEQ      );
          }
        case 124: break;
        case 28: 
          { 
          }
        case 125: break;
        case 29: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 126: break;
        case 30: 
          { return alloy_num (yytext());
          }
        case 127: break;
        case 31: 
          { return alloy_sym(yytext(), CompSym.AND         );
          }
        case 128: break;
        case 32: 
          { return alloy_sym(yytext(), CompSym.PLUSPLUS    );
          }
        case 129: break;
        case 33: 
          { return alloy_sym(yytext(), CompSym.ARROW       );
          }
        case 130: break;
        case 34: 
          { return alloy_sym(yytext(), CompSym.SHA         );
          }
        case 131: break;
        case 35: 
          { return alloy_sym(yytext(), CompSym.GTE         );
          }
        case 132: break;
        case 36: 
          { return alloy_sym(yytext(), CompSym.RANGE       );
          }
        case 133: break;
        case 37: 
          { return alloy_sym(yytext(), CompSym.DOMAIN      );
          }
        case 134: break;
        case 38: 
          { return alloy_sym(yytext(), CompSym.SHL         );
          }
        case 135: break;
        case 39: 
          { return alloy_sym(yytext(), CompSym.LTE         );
          }
        case 136: break;
        case 40: 
          { return alloy_sym(yytext(), CompSym.IMPLIES     );
          }
        case 137: break;
        case 41: 
          { return alloy_sym(yytext(), CompSym.OR          );
          }
        case 138: break;
        case 42: 
          { return alloy_sym(yytext(), CompSym.AS          );
          }
        case 139: break;
        case 43: 
          { return alloy_sym(yytext(), CompSym.NO          );
          }
        case 140: break;
        case 44: 
          { return alloy_sym(yytext(), CompSym.IN          );
          }
        case 141: break;
        case 45: 
          { return alloy_string(yytext());
          }
        case 142: break;
        case 46: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 143: break;
        case 47: 
          { return alloy_sym(yytext(), CompSym.SHR         );
          }
        case 144: break;
        case 48: 
          { return alloy_sym(yytext(), CompSym.IFF         );
          }
        case 145: break;
        case 49: 
          { return alloy_sym(yytext(), CompSym.ALL         );
          }
        case 146: break;
        case 50: 
          { return alloy_sym(yytext(), CompSym.BUT         );
          }
        case 147: break;
        case 51: 
          { return alloy_sym(yytext(), CompSym.SET         );
          }
        case 148: break;
        case 52: 
          { return alloy_sym(yytext(), CompSym.SEQ         );
          }
        case 149: break;
        case 53: 
          { return alloy_sym(yytext(), CompSym.SUM         );
          }
        case 150: break;
        case 54: 
          { return alloy_sym(yytext(), CompSym.SIG         );
          }
        case 151: break;
        case 55: 
          { return alloy_sym(yytext(), CompSym.RUN         );
          }
        case 152: break;
        case 56: 
          { return alloy_sym(yytext(), CompSym.LET         );
          }
        case 153: break;
        case 57: 
          { return alloy_sym(yytext(), CompSym.FUN         );
          }
        case 154: break;
        case 58: 
          { return alloy_sym(yytext(), CompSym.FOR         );
          }
        case 155: break;
        case 59: 
          { return alloy_sym(yytext(), CompSym.EXH         );
          }
        case 156: break;
        case 60: 
          { return alloy_sym(yytext(), CompSym.VAR         );
          }
        case 157: break;
        case 61: 
          { return alloy_sym(yytext(), CompSym.INT         );
          }
        case 158: break;
        case 62: 
          { return alloy_sym(yytext(), CompSym.ONE         );
          }
        case 159: break;
        case 63: 
          { return alloy_sym(yytext(), CompSym.SIGINT      );
          }
        case 160: break;
        case 64: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 161: break;
        case 65: 
          { return alloy_sym(yytext(), CompSym.SOME        );
          }
        case 162: break;
        case 66: 
          { return alloy_sym(yytext(), CompSym.THIS        );
          }
        case 163: break;
        case 67: 
          { return alloy_sym(yytext(), CompSym.LONE        );
          }
        case 164: break;
        case 68: 
          { return alloy_sym(yytext(), CompSym.FACT        );
          }
        case 165: break;
        case 69: 
          { return alloy_sym(yytext(), CompSym.ELSE        );
          }
        case 166: break;
        case 70: 
          { return alloy_sym(yytext(), CompSym.ENUM        );
          }
        case 167: break;
        case 71: 
          { return alloy_sym(yytext(), CompSym.NONE        );
          }
        case 168: break;
        case 72: 
          { return alloy_sym(yytext(), CompSym.UNIV        );
          }
        case 169: break;
        case 73: 
          { return alloy_sym(yytext(), CompSym.IDEN        );
          }
        case 170: break;
        case 74: 
          { return alloy_sym(yytext(), CompSym.ONCE        );
          }
        case 171: break;
        case 75: 
          { return alloy_sym(yytext(), CompSym.OPEN        );
          }
        case 172: break;
        case 76: 
          { return alloy_sym(yytext(), CompSym.PART        );
          }
        case 173: break;
        case 77: 
          { return alloy_sym(yytext(), CompSym.PRED        );
          }
        case 174: break;
        case 78: 
          { return alloy_sym(yytext(), CompSym.DISJ        );
          }
        case 175: break;
        case 79: 
          { return alloy_sym(yytext(), CompSym.TIME        );
          }
        case 176: break;
        case 80: 
          { return alloy_sym(yytext(), CompSym.AFTER       );
          }
        case 177: break;
        case 81: 
          { return alloy_sym(yytext(), CompSym.SINCE       );
          }
        case 178: break;
        case 82: 
          { return alloy_sym(yytext(), CompSym.CHECK       );
          }
        case 179: break;
        case 83: 
          { return alloy_sym(yytext(), CompSym.UNTIL       );
          }
        case 180: break;
        case 84: 
          { return alloy_sym(yytext(), CompSym.ASSERT      );
          }
        case 181: break;
        case 85: 
          { return alloy_sym(yytext(), CompSym.ALWAYS      );
          }
        case 182: break;
        case 86: 
          { return alloy_sym(yytext(), CompSym.EXPECT      );
          }
        case 183: break;
        case 87: 
          { return alloy_sym(yytext(), CompSym.MODULE      );
          }
        case 184: break;
        case 88: 
          { return alloy_sym(yytext(), CompSym.STRING      );
          }
        case 185: break;
        case 89: 
          { return alloy_sym(yytext(), CompSym.TRIGGER     );
          }
        case 186: break;
        case 90: 
          { return alloy_sym(yytext(), CompSym.RELEASE     );
          }
        case 187: break;
        case 91: 
          { return alloy_sym(yytext(), CompSym.EXACTLY     );
          }
        case 188: break;
        case 92: 
          { return alloy_sym(yytext(), CompSym.EXTENDS     );
          }
        case 189: break;
        case 93: 
          { return alloy_sym(yytext(), CompSym.PRIVATE     );
          }
        case 190: break;
        case 94: 
          { return alloy_sym(yytext(), CompSym.ABSTRACT    );
          }
        case 191: break;
        case 95: 
          { return alloy_sym(yytext(), CompSym.PREVIOUS    );
          }
        case 192: break;
        case 96: 
          { return alloy_sym(yytext(), CompSym.EVENTUALLY  );
          }
        case 193: break;
        case 97: 
          { return alloy_sym(yytext(), CompSym.HISTORICALLY);
          }
        case 194: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(CompSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
